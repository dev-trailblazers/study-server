plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.7'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.2.7') // Spring Boot BOM 적용

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.4'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('copyEnvFile') {
    doLast {
        def submoduleEnvFile = file('secretes/.env')
        def rootEnvFile = file('.env')

        if (submoduleEnvFile.exists()) {
            submoduleEnvFile.withInputStream { input ->
                rootEnvFile.withOutputStream { output ->
                    output << input
                }
            }
            println '.env file copied from submodule to root directory.'
        } else {
            println 'No .env file found in the submodule.'
        }
    }
}

bootRun {
    dependsOn copyEnvFile
    doFirst {
        if (file('.env').exists()) {
            file('.env').readLines().each {
                if (!it.isEmpty() && !it.startsWith("#")) {
                    def pos = it.indexOf("=")
                    def key = it.substring(0, pos)
                    def value = it.substring(pos + 1)

                    if (System.getenv(key) == null) {
                        environment key, value
                    }
                }
            }
        }
    }
}
